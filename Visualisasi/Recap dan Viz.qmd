---
title: "Recap dan Viz"
format: html
---

## Evaluasi Metrik
## Base
```{r}
library(readxl)

# Get a list of all files in the Output directory
file_list <- list.files(path = "../Output", pattern = "_base\\.xlsx$", full.names = TRUE)

# Filter out files that have _prob in their names
file_list <- file_list[!grepl("_prob", file_list)]

# Function to read a file and name the data frame accordingly
read_and_name <- function(file_path) {
  data <- read_excel(file_path)
  name <- gsub(".*/|\\.xlsx$", "", file_path)  # Extract the base name without path and extension
  return(setNames(list(data), name))
}

# Read all files and create a named list
data_list <- lapply(file_list, read_and_name)

# Combine all named lists into a single list
data_list <- do.call(c, data_list)

# If you want to see the list
names(data_list)
```

```{r}
for (name in names(data_list)) {
  if (grepl("my", name)) {
    data_list[[name]]$Negara <- "Malaysia"
  }
}
data_list$my1_base
```
```{r}
for (name in names(data_list)) {
  if (grepl("ph", name)) {
    data_list[[name]]$Negara <- "Filipina"
  }
}
for (name in names(data_list)) {
  if (grepl("sg", name)) {
    data_list[[name]]$Negara <- "Singapura"
  }
}
for (name in names(data_list)) {
  if (grepl("tl", name)) {
    data_list[[name]]$Negara <- "Thailand"
  }
}
```

```{r}
# data 1% base
# Combine all data frames into a single data frame
identifiers <- c("id1", "my1", "ph1", "sg1", "tl1")

# Filter the data_list based on these identifiers
filtered_data_list <- data_list[grepl(paste(identifiers, collapse="|"), names(data_list))]

# Combine the filtered data frames using rbind
data1 <- do.call(rbind, filtered_data_list)

# If you want to check the combined data
data1
```

```{r}
# data 2.5% base
# Combine all data frames into a single data frame
identifiers <- c("id2", "my2", "ph2", "sg2", "tl2")

# Filter the data_list based on these identifiers
filtered_data_list <- data_list[grepl(paste(identifiers, collapse="|"), names(data_list))]

# Combine the filtered data frames using rbind
data2 <- do.call(rbind, filtered_data_list)

# If you want to check the combined data
data2
```

```{r}
# data 5% base
# Combine all data frames into a single data frame
identifiers <- c("id3", "my3", "ph3", "sg3", "tl3")

# Filter the data_list based on these identifiers
filtered_data_list <- data_list[grepl(paste(identifiers, collapse="|"), names(data_list))]

# Combine the filtered data frames using rbind
data3 <- do.call(rbind, filtered_data_list)

# If you want to check the combined data
data3
```

```{r}
# combine all data 123
data123 <- rbind(data1, data2, data3)
data123
```

```{r}
writexl::write_xlsx(data123, "evaluasibasline.xlsx")
```

### Boxplot

```{r}
library(ggplot2)
```
```{r}
# reorder factor Model
data123$Model <- factor(data123$Model, levels = c("RNN", "LSTM", "GRU", "RF", "XGBoost"))
```


```{r}
# HR
get_box_stats <- function(y, upper_limit = max(data123$HR) * 1.3) {
  return(data.frame(
    y = 0.95 * upper_limit,
    label = paste(
      "Mean =", round(mean(y), 2), "\n",
      "Median =", round(median(y), 2), "\n"
    )
  ))
}
ggplot(data123, aes(x = Model, y = HR)) +
  geom_boxplot(color = "black", fill = "orange") +
  stat_summary(fun.data = get_box_stats, geom = "text", hjust = 0.5, vjust = 0.9) +
  labs(title = "",
       x = "",
       y = "Hit Rate") +
  theme_classic()
```
```{r}
# FR
data123$FR <- 1-data123$FR
```

```{r}
get_box_stats <- function(y, upper_limit = min(data123$FR) * 1.1) {
  return(data.frame(
    y = 0.4,
    label = paste(
      "Mean =", round(mean(y), 2), "\n",
      "Median =", round(median(y), 2), "\n"
    )
  ))
}
ggplot(data123, aes(x = Model, y = FR)) +
  geom_boxplot(color = "black", fill = "orange") +
  stat_summary(fun.data = get_box_stats, geom = "text", hjust = 0.5, vjust = 0.9) +
  labs(title = "",
       x = "",
       y = "Inverted False Alarm Rate") +
  ylim(0.3, 1) +
  theme_classic()
```



```{r}
# BACC
get_box_stats <- function(y, upper_limit = max(data123$BACC) * 1.3) {
  return(data.frame(
    y = 0.95 * upper_limit,
    label = paste(
      "Mean =", round(mean(y), 2), "\n",
      "Median =", round(median(y), 2), "\n"
    )
  ))
}
ggplot(data123, aes(x = Model, y = BACC)) +
  geom_boxplot(color = "black", fill = "orange") +
  stat_summary(fun.data = get_box_stats, geom = "text", hjust = 0.5, vjust = 0.9) +
  labs(title = "",
       x = "",
       y = "Balanced Accuracy") +
  #ylim(0.6, 1) +
  theme_classic()
```

```{r}
# PRC
get_box_stats <- function(y, upper_limit = max(data123$PRC) * 1.3) {
  return(data.frame(
    y = 0.95 * upper_limit,
    label = paste(
      "Mean =", round(mean(y), 2), "\n",
      "Median =", round(median(y), 2), "\n"
    )
  ))
}
ggplot(data123, aes(x = Model, y = PRC)) +
  geom_boxplot(color = "black", fill = "orange") +
  stat_summary(fun.data = get_box_stats, geom = "text", hjust = 0.5, vjust = 0.9) +
  labs(title = "",
       x = "",
       y = "Precision-Recall Curve Score") +
  #ylim(0.6, 1) +
  theme_classic()
```
```{r}
library(tidyr)
# Reshape data to long format
data_long <- data123 %>%
  pivot_longer(cols = c(HR, FR, BACC, PRC), 
               names_to = "Metric", 
               values_to = "Value")
# Change name
data_long$Metric[data_long$Metric == "HR"] <- "Hit Rate"
data_long$Metric[data_long$Metric == "FR"] <- "Inverted False Alarm Rate"
data_long$Metric[data_long$Metric == "BACC"] <- "Balanced Accuracy"
data_long$Metric[data_long$Metric == "PRC"] <- "Precision-Recall Curve Score"

data_long$Metric <- factor(data_long$Metric, levels = c("Hit Rate", "Inverted False Alarm Rate", "Balanced Accuracy", "Precision-Recall Curve Score"))

# Create combined boxplot
ggplot(data_long, aes(x = Model, y = Value)) +
  geom_boxplot(color = "black", fill = "orange") +
  facet_wrap(~ Metric, scales = "free_y") +
  labs(title = "",
       x = "",
       y = "Score") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(legend.position = "top")
ggsave("Baseline Boxplot.jpg", dpi = 300, width = 12, height = 7)
```

### Anova
```{r}
# All Model
anova_hr <- aov(PRC ~ Model, data = data123)
summary(anova_hr)
shapiro.test(residuals(anova_hr))
car::leveneTest(anova_hr)
```
```{r}
# Fisher's LSD
TukeyHSD(anova_hr)
```
```{r}
# Only Rnns
data123_rnn <- data123[data123$Model == "RNN" | data123$Model == "LSTM" | data123$Model == "GRU",]
anova_hr_rnn <- aov(PRC ~ Model, data = data123_rnn)
summary(anova_hr_rnn)
shapiro.test(residuals(anova_hr_rnn))
car::leveneTest(anova_hr_rnn)
```
```{r}
# Fisher's LSD
TukeyHSD(anova_hr_rnn)
```



## Smote ENN

```{r}
library(readxl)

# Get a list of all files in the Output directory
file_list <- list.files(path = "../Output", pattern = "_smote\\.xlsx$", full.names = TRUE)

# Filter out files that have _prob in their names
file_list <- file_list[!grepl("_prob", file_list)]

# Function to read a file and name the data frame accordingly
read_and_name <- function(file_path) {
  data <- read_excel(file_path)
  name <- gsub(".*/|\\.xlsx$", "", file_path)  # Extract the base name without path and extension
  return(setNames(list(data), name))
}

# Read all files and create a named list
data_list <- lapply(file_list, read_and_name)

# Combine all named lists into a single list
data_list <- do.call(c, data_list)

# If you want to see the list
names(data_list)
```

```{r}
for (name in names(data_list)) {
  if (grepl("my", name)) {
    data_list[[name]]$Negara <- "Malaysia"
  }
}
data_list$my1_smote
```
```{r}
for (name in names(data_list)) {
  if (grepl("ph", name)) {
    data_list[[name]]$Negara <- "Filipina"
  }
}
for (name in names(data_list)) {
  if (grepl("sg", name)) {
    data_list[[name]]$Negara <- "Singapura"
  }
}
for (name in names(data_list)) {
  if (grepl("tl", name)) {
    data_list[[name]]$Negara <- "Thailand"
  }
}
```

```{r}
# data 1% 
# Combine all data frames into a single data frame
identifiers <- c("id1", "my1", "ph1", "sg1", "tl1")

# Filter the data_list based on these identifiers
filtered_data_list <- data_list[grepl(paste(identifiers, collapse="|"), names(data_list))]

# Combine the filtered data frames using rbind
data1 <- do.call(rbind, filtered_data_list)

# If you want to check the combined data
data1
```

```{r}
# data 2.5% 
# Combine all data frames into a single data frame
identifiers <- c("id2", "my2", "ph2", "sg2", "tl2")

# Filter the data_list based on these identifiers
filtered_data_list <- data_list[grepl(paste(identifiers, collapse="|"), names(data_list))]

# Combine the filtered data frames using rbind
data2 <- do.call(rbind, filtered_data_list)

# If you want to check the combined data
data2
```

```{r}
# data 5% 
# Combine all data frames into a single data frame
identifiers <- c("id3", "my3", "ph3", "sg3", "tl3")

# Filter the data_list based on these identifiers
filtered_data_list <- data_list[grepl(paste(identifiers, collapse="|"), names(data_list))]

# Combine the filtered data frames using rbind
data3 <- do.call(rbind, filtered_data_list)

# If you want to check the combined data
data3
```

```{r}
# combine all data 123
data123 <- rbind(data1, data2, data3)
data123
```
```{r}
writexl::write_xlsx(data123, "evaluasismote.xlsx")
```

### Boxplot

```{r}
library(ggplot2)
```
```{r}
# reorder factor Model
data123$Model <- factor(data123$Model, levels = c("RNN", "LSTM", "GRU", "RF", "XGBoost"))
```


```{r}
# HR
get_box_stats <- function(y, upper_limit = max(data123$HR) * 1.3) {
  return(data.frame(
    y = 0.95 * upper_limit,
    label = paste(
      "Mean =", round(mean(y), 2), "\n",
      "Median =", round(median(y), 2), "\n"
    )
  ))
}
ggplot(data123, aes(x = Model, y = HR)) +
  geom_boxplot(color = "black", fill = "orange") +
  stat_summary(fun.data = get_box_stats, geom = "text", hjust = 0.5, vjust = 0.9) +
  labs(title = "",
       x = "",
       y = "Hit Rate") +
  theme_classic()
```
```{r}
# FR
data123$FR <- 1-data123$FR
```

```{r}
get_box_stats <- function(y, upper_limit = min(data123$FR) * 1.1) {
  return(data.frame(
    y = 0.8,
    label = paste(
      "Mean =", round(mean(y), 2), "\n",
      "Median =", round(median(y), 2), "\n"
    )
  ))
}
ggplot(data123, aes(x = Model, y = FR)) +
  geom_boxplot(color = "black", fill = "orange") +
  stat_summary(fun.data = get_box_stats, geom = "text", hjust = 0.5, vjust = 0.9) +
  labs(title = "",
       x = "",
       y = "Inverted False Alarm Rate") +
  ylim(0.6, 1) +
  theme_classic()
```



```{r}
# BACC
get_box_stats <- function(y, upper_limit = max(data123$BACC) * 1.3) {
  return(data.frame(
    y = 0.95 * upper_limit,
    label = paste(
      "Mean =", round(mean(y), 2), "\n",
      "Median =", round(median(y), 2), "\n"
    )
  ))
}
ggplot(data123, aes(x = Model, y = BACC)) +
  geom_boxplot(color = "black", fill = "orange") +
  stat_summary(fun.data = get_box_stats, geom = "text", hjust = 0.5, vjust = 0.9) +
  labs(title = "",
       x = "",
       y = "Balanced Accuracy") +
  #ylim(0.6, 1) +
  theme_classic()
```

```{r}
# PRC
get_box_stats <- function(y, upper_limit = max(data123$PRC) * 1.3) {
  return(data.frame(
    y = 0.95 * upper_limit,
    label = paste(
      "Mean =", round(mean(y), 2), "\n",
      "Median =", round(median(y), 2), "\n"
    )
  ))
}
ggplot(data123, aes(x = Model, y = PRC)) +
  geom_boxplot(color = "black", fill = "orange") +
  stat_summary(fun.data = get_box_stats, geom = "text", hjust = 0.5, vjust = 0.9) +
  labs(title = "",
       x = "",
       y = "Precision-Recall Curve Score") +
  #ylim(0.6, 1) +
  theme_classic()
```
```{r}
library(tidyr)
# Reshape data to long format
data_long <- data123 %>%
  pivot_longer(cols = c(HR, FR, BACC, PRC), 
               names_to = "Metric", 
               values_to = "Value")
# Change name
data_long$Metric[data_long$Metric == "HR"] <- "Hit Rate"
data_long$Metric[data_long$Metric == "FR"] <- "Inverted False Alarm Rate"
data_long$Metric[data_long$Metric == "BACC"] <- "Balanced Accuracy"
data_long$Metric[data_long$Metric == "PRC"] <- "Precision-Recall Curve Score"

data_long$Metric <- factor(data_long$Metric, levels = c("Hit Rate", "Inverted False Alarm Rate", "Balanced Accuracy", "Precision-Recall Curve Score"))

# Create combined boxplot
ggplot(data_long, aes(x = Model, y = Value)) +
  geom_boxplot(color = "black", fill = "orange") +
  facet_wrap(~ Metric, scales = "free_y") +
  labs(title = "",
       x = "",
       y = "Score") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(legend.position = "top")
ggsave("Smote Boxplot.jpg", dpi = 300, width = 12, height = 7)
```

### Anova
```{r}
# All Model
anova_hr <- aov(PRC ~ Model, data = data123)
summary(anova_hr)
shapiro.test(residuals(anova_hr))
car::leveneTest(anova_hr)
```
```{r}
# Fisher's LSD
TukeyHSD(anova_hr)
```
```{r}
# Only Rnns
data123_rnn <- data123[data123$Model == "RNN" | data123$Model == "LSTM" | data123$Model == "GRU",]
anova_hr_rnn <- aov(PRC ~ Model, data = data123_rnn)
summary(anova_hr_rnn)
shapiro.test(residuals(anova_hr_rnn))
car::leveneTest(anova_hr_rnn)
```
```{r}
# Fisher's LSD
TukeyHSD(anova_hr_rnn)
```
### Negara

```{r}
# HR
summary_stats1 <- data123 %>%
  group_by(Negara) %>%
  summarize(
    mean = mean(HR, na.rm = TRUE),
    sd = sd(HR, na.rm = TRUE),
    min = min(HR, na.rm = TRUE),
    max = max(HR, na.rm = TRUE)
  )
summary_stats1
```
```{r}
# FAR
data123$FR <- 1-data123$FR
summary_stats2 <- data123 %>%
  group_by(Negara) %>%
  summarize(
    mean = mean(FR, na.rm = TRUE),
    sd = sd(FR, na.rm = TRUE),
    min = min(FR, na.rm = TRUE),
    max = max(FR, na.rm = TRUE)
  )
summary_stats2
```


```{r}
list1 <- list(summary_stats1, summary_stats2)
writexl::write_xlsx(list1, "EvaluasiNegara.xlsx")
```

